function setprompt {

    EXITSTATUS="$?"
    STARTTITLEBAR="\[\033]0;";
    ENDTITLEBAR="\007";
    BOLD="\[\033[1m\]"
    RED="\[\033[0;31m\]"
    GREEN="\[\e[0;32m\]"
    BLUE="\[\e[34m\]"
    PURPLE="\[\033[35m\]"
    BLACK="\[\033[m\]"

    NEWLINE="\n"

    #HOST="\h"
    #USER="\u"
    #DIR="\w"
    #DATE="\d"
    #TIME="\t"

    PROMPT_PRE="${STARTTITLEBAR}\u@$\h:\w${ENDTITLEBAR}\n${RED}\D{%T} ${TZ} ${BLUE}\D{%a %d-%b} ${BLACK}["
    PROMPT_POST="${BLACK}@${PURPLE}\h${BLACK}]:[${BLUE}\w${BLACK}]"

    if [ "${USER}" == "root" ]
    then
      PROMPT_USER="${RED}${BOLD}\u"
    else
      PROMPT_USER="${GREEN}\u"
    fi

    if [ "${EXITSTATUS}" -eq 0 ]
    then
       PROMPT_EXIT_STATUS="${GREEN}${EXITSTATUS}"
    else
       PROMPT_EXIT_STATUS="${RED}${BOLD}${EXITSTATUS}"
    fi

    PS1="${PROMPT_PRE}${PROMPT_USER}${PROMPT_POST} [${PROMPT_EXIT_STATUS}${BLACK}]${NEWLINE}\\$ "

    PS2="${BOLD}>${BLACK} "
}

# silence zsh message on macOS Catalina
export BASH_SILENCE_DEPRECATION_WARNING=1

export TZ=UTC
# Refresh bash's idea of $TZ for prompt display purposes.
# As of bash 4.1, this requires running an external command!
if [[ $- = *i* ]]; then command true; fi

PROMPT_COMMAND=setprompt

#export PS1="\[\033]0;\u@\h: \w\007\n\033[31m\]\t \d [\u@\h:[\033[34m\w\033[31m]\033[0m\n$ "
#export TERM=vt100

export EDITOR=vi
export PAGER=less

export GOPATH=${HOME}/go
export GOBIN=${GOPATH}/bin
export PATH=${PATH}:${GOBIN}:/usr/local/protoc/bin:$HOME/bin

# Google Cloud SDK
if [ -f "${HOME}/src/google-cloud-sdk/path.bash.inc" ]
then
  . ${HOME}/src/google-cloud-sdk/path.bash.inc
fi

# gcloud command completion
if [ -f "${HOME}/src/google-cloud-sdk/completion.bash.inc" ]
then
  . ${HOME}/src/google-cloud-sdk/completion.bash.inc
fi

export VAULT_ADDR=https://ns1.home.seva.cafe:8200
export VAULT_TOKEN=$(security find-generic-password -wa seva_cafe_vault_token)

# Azure config
export vault_azure_path=kv/azure/hashi
export ARM_CLIENT_ID=$(vault kv get -field ARM_CLIENT_ID ${vault_azure_path})
export ARM_CLIENT_SECRET=$(vault kv get -field ARM_CLIENT_SECRET ${vault_azure_path})
export ARM_SUBSCRIPTION_ID=$(vault kv get -field ARM_SUBSCRIPTION_ID ${vault_azure_path})
export ARM_TENANT_ID=$(vault kv get -field ARM_TENANT_ID ${vault_azure_path})

# AWS config
export vault_aws_path=kv/aws/hashi
export AWS_SECRET_ACCESS_KEY=$(vault kv get -field AWS_SECRET_ACCESS_KEY ${vault_aws_path})
export AWS_ACCESS_KEY_ID=$(vault kv get -field AWS_ACCESS_KEY_ID ${vault_aws_path})
export AWS_DEFAULT_REGION=us-west-2

if [ -f "${HOME}/.config/tfe_config" ]
then
  . ${HOME}/.config/tfe_config
fi

# GCP config
export vault_gcp_path=kv/gcp/hashi
export GOOGLE_CREDENTIALS=$(vault kv get -field GOOGLE_CREDENTIALS ${vault_gcp_path})

# hashi command line completion
complete -C /usr/local/bin/vault vault
complete -C /usr/local/bin/consul consul
complete -C /usr/local/bin/terraform terraform
complete -C /usr/local/bin/packer packer
complete -C /usr/local/bin/terraform terraform

# gnupg ssh with yubikey
if [ "$(pgrep -x gpg-agent)" == "" ]
then
  eval $(gpg-agent --daemon --enable-ssh-support  --log-file ${HOME}/.gnupg/gpg-agent.log)
fi
# this returns
SSH_AUTH_SOCK=/Users/khemani/.gnupg/S.gpg-agent.ssh; export SSH_AUTH_SOCK;
